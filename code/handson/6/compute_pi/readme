Compute pi with monte carlo method.

Subdir src contains the code to use for the exercise (fill the holes).
Subdir solution is complete.

If you just want to build solution, just add "-DBUILD_SOLUTION=ON" on the cmake command line

##################################################################
step 0: locate kokkos src dir
##################################################################

create a symbolic link to an existing kokkos source dir.
e.g. if you have cloned kokkos in your home dir, just type
     ln -s $HOME/kokkos-tutorial/kokkos kokkos

##################################################################
step 1: How to build ?
##################################################################

- for OpenMP
  * mkdir build_openmp; cd build_openmp
  * cmake -DKOKKOS_ENABLE_OPENMP=ON ..
  * make

- for Cuda (ouessant host node)
  * mkdir build_cuda_sm37; cd build_cuda_sm37
  * cmake -DKOKKOS_ENABLE_CUDA=ON -DKOKKOS_ENABLE_CUDA_LAMBDA=ON -DKOKKOS_ARCH=Kepler37 ..
  * make

- for Cuda (ouessant compute node)
  * mkdir build_cuda_sm60; cd build_cuda_sm60
  * cmake -DKOKKOS_ENABLE_CUDA=ON -DKOKKOS_ENABLE_CUDA_LAMBDA=ON -DKOKKOS_ARCH=Pascal60 ..
  * make

##################################################################
step 2: Open src/compute_pi.cpp and try to fill the holes.
        Just find the locations of "TODO".
##################################################################
